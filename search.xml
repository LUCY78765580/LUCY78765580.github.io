<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[4Sum]]></title>
    <url>%2F2018%2F03%2F17%2F4Sum%2F</url>
    <content type="text"><![CDATA[这一篇解决4Sum这一题 Leetcode 题目地址 方法和3Sum类似 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/** * Return an array of arrays of size *returnSize. * Note: The returned array must be malloced, assume caller calls free(). *///四数之和//方法同 015 3Sum 基本一致，在外面多一层循环而已void Bubble_Sort(int* nums,int numsSize) &#123; int p,i; int temp; int flag; for (p=numsSize-1;p&gt;=0;p--) &#123; flag=0; for (i=0;i&lt;p;i++) &#123; if (nums[i]&gt;nums[i+1]) &#123; temp=nums[i+1]; nums[i+1]=nums[i]; nums[i]=temp; flag=1; &#125; &#125; if (flag==0) break; &#125;&#125;int** fourSum(int* nums, int numsSize, int target, int* returnSize) &#123; if (!nums || numsSize&lt;4) return 0; int total=64; int** res=(int**)malloc(sizeof(int*)*total); for (int n;n&lt;total;n++) &#123; res[n]=(int*)malloc(sizeof(int)*4); &#125; Bubble_Sort(nums,numsSize); int i,j,m,n; int sum; int size=0; //两层for循环，for循环中while循环 for (i=0;i&lt;numsSize-3;i++) &#123; if (i&gt;0&amp;&amp;nums[i]==nums[i-1]) continue; for (j=i+1;j&lt;numsSize-2;j++) &#123; if (j&gt;i+1&amp;&amp;nums[j]==nums[j-1]) continue; m=j+1; n=numsSize-1; while (m&lt;n) &#123; sum=nums[i]+nums[j]+nums[m]+nums[n]; if (sum==target) &#123; //检查是否重复 if (size&gt;0&amp;&amp;res[size-1][0]==nums[i]&amp;&amp;res[size-1][1]==nums[j]&amp;&amp;res[size-1][2]==nums[m]&amp;&amp;res[size-1][3]==nums[n]) &#123; m++; n--; continue; &#125; if (size==total) &#123; total &lt;&lt;= 1; res=(int**)realloc(res,sizeof(int*)*total); for (int t=size;t&lt;total;t++) &#123; res[t]=(int*)malloc(sizeof(int)*4); &#125; &#125; res[size][0]=nums[i]; res[size][1]=nums[j]; res[size][2]=nums[m]; res[size][3]=nums[n]; size++; m++; n--; &#125; else if (sum&lt;target) &#123; m++; &#125; else &#123; n--; &#125; &#125; &#125; &#125; *returnSize=size; return res;&#125;//方法二：并查集]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数据结构</tag>
        <tag>C</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3Sum]]></title>
    <url>%2F2018%2F03%2F17%2F3Sum%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106/** * Return an array of arrays of size *returnSize. * Note: The returned array must be malloced, assume caller calls free(). *///三数之和//类似的：3Sum Cloest/4Sum/等等//按位操作符 &lt;&lt;//a&lt;&lt;b 表示 将a转为二进制，然后左移b位（在后面添加b个0），实际上是a乘上2的b次方//参考博客 http://blog.csdn.net/yinhaijing_ss/article/details/78452377//定义一个快速排序void Quick_Sort(int* nums,int left,int right) &#123; if (left&gt;=right) return ; int i=left; int j=right; int key=nums[i]; while (i&lt;j) &#123; while (i&lt;j&amp;&amp;nums[j]&gt;key) j--; if (i&lt;j) &#123; nums[i++]=nums[j]; &#125; while (i&lt;j&amp;&amp;nums[i]&lt;key) i++; if (i&lt;j) &#123; nums[j--]=nums[i]; &#125; &#125; nums[i]=key; Quick_Sort(nums,left,i-1); Quick_Sort(nums,i+1,right);&#125;int** threeSum(int* nums, int numsSize, int* returnSize) &#123; if (numsSize==0) return NULL; int total=100; int** res=(int**)malloc(sizeof(int*)*(total)); for (int n=0;n&lt;total;n++) &#123; res[n]=(int*)malloc(sizeof(int)*3); &#125; Quick_Sort(nums,0,numsSize-1); int i,j,k; int sum; int size=0; //for循环，分为三种情况 //sum==0 / sum&gt;0 / sum&lt;0 for (i=0;i&lt;numsSize-2;i++) &#123; if (i&gt;0&amp;&amp;nums[i]==nums[i-1]) &#123; //对于nums[i],跳过相同的部分 continue; &#125; j=i+1; k=numsSize-1; while (j&lt;k) &#123; sum=nums[i]+nums[j]+nums[k]; //注意这个sum放置的位置，一定要放在while循环里面 if (sum==0) &#123; //检查是否重复 if (size&gt;0&amp;&amp;res[size-1][0]==nums[i]&amp;&amp;res[size-1][1]==nums[j]&amp;&amp;res[size-1][2]==nums[k]) &#123; j++; k--; continue; &#125; //检查内存并重新分配 //total&lt;&lt;=1表示变为total*2的一次方（就是变为翻倍） if (size==total) &#123; total&lt;&lt;=1; res=(int**)realloc(res,sizeof(int*)*total); for (int t=size;t&lt;total;t++) &#123; res[t]=(int*)malloc(sizeof(int)*3); &#125; &#125; res[size][0]=nums[i]; res[size][1]=nums[j]; res[size][2]=nums[k]; size++; j++; k--; &#125; else if (sum&gt;0) &#123; k--; &#125; else &#123; j++; &#125; &#125; &#125; *returnSize=size; return res;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数据结构</tag>
        <tag>C</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
